IDENTIFICATION DIVISION.
PROGRAM-ID.
	INVERTED-LIST.
*DESCRIPTION.
*INVERT PROGRAM 1 DATA LIST FOR BETTER PERFORMANCE.
	AUTHOR.
	       LEE HOLT.
* Heavily drawn from code by Ken Hartness.	       
*CREATED MAY,02	2012.
ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
	SELECT INPUT-DATA
		ASSIGN TO 'S:\COBOL\CUSTOMERFILE.CBL'.
        	ORGANIZATION IS INDEXED
        	ACCESS IS RANDOM
        	RECORD KEY IS CUS-ID
        	ALTERNATE KEY IS CUS-NAME WITH DUPLICATES.
        SLECT KEYWORD-DB
        	ASSIGN TO 'S:\COBOL\INVERSION\KEYWORD.CBL'.
        	ORGANIZATION IS INDEXED
        	ACCESS IS RANDOM
        	RECORD KEY IS KEY-WRD.
        SLECT KEYWORD-INX
        	ASSIGN TO 'S:\COBOL\KEYWORD.REL'
        	ORGANIZATION IS RELATIVE
        	ACCESS IS RANDOM
        	RELATIVE KEY IS RELAKEY.

DATA DIVISION.
FILE SECTION.
FD  CUSTOMER-DATA.
01  CUSTOMER-REC.
	05  CUS-ID   PIC 9(9) COMP.
	05  CUS-NAME PIC X(30).
	05  CUS-LIMIT PIC 9(8).
	05  CUS-BAL PIC 9(8).

FD  KEYWORD-DB.
01  KEYWORD-INDEX.
	05  KEY-WRD  PIC X(30).
	05  FIRSTKEY PIC 9(9) COMP.
	05  LASTKEY  PIC 9(9) COMP.

FD  KEYWORD-IDX.
01  KEYWORD-INDEX.
	05  A-PREV	PIC 9(9) COMP.
	05  A-NEXT	PIC 9(9) COMP.
	05  A-LENGTH	PIC 9(9) COMP.
	05  A-LIST	PIC 9(9) COMP OCCURS 125 TIMES.

WORKING-STORAGE SECTION.
01 W-SHORTTRM		PIC 999 COMP.
01 W-SHORTTRM2		PIC 999 COMP.
01 RELAKEY		PIC 9(9) COMP.
01 W-CLEANWORD		PIC X(30).

01 W-MIN-LENGTH		PIC 999 COMP.
01 WORD-LIST.
	05 A-LENGTH 	PIC 9(9) COMP.
	05 WORD-DATA    OCCURS 1 TO 100 TIMES
			DEPENDING ON A-LENGTH
			INDEXED BY NAMEDEX.
	10 WWORD 	PIC X(30).
	10 W-POS 	PIC 999 COMP.
	10 W-ID-LIST.
		15 A-PREV   PIC 9(9) COMP.
		15 A-NEXT   PIC 9(9) COMP.
		15 A-LEN    PIC 9(9) COMP.
		15 A-LIST   PIC 9(9) COMP OCCURS 125 TIMES.

01 W-MATCH		PIC X VALUE 'N'.
	88 MATCH	VALUE 'Y'.
	88 NO-MATCH	VALUE 'N'.

PROCEDURE DIVISION USING CUS-ID, RELAKEY, W-POS, W-ID-LIST.

FIND-FILES.
	PERFORM GET-SEARCH-WORDS.
	PERFORM MERGE-LISTS.
	STOP RUN.

GET-SEARCH-WORDS.
	MOVE 0 TO A-LENGTH.
	DISPLAY 'Enter name to search for' with no advancing.
	ACCEPT W-CLEANWORD.
	PERFORM UNTIL W-CLEANWORD = 'QUIT OR 'quit'.
		ADD 1 TO A-LENGTH.
		MOVE FUNCTION LOWER-CASE(W-CLEANWORD) TO W-WORD(A-LENGTH)
		DISPLAY 'Enter name to search for' WITH NO ADVANCING.
			ACCEPT W-CLEANWORD.
	END-PERFORM.

MERGE-LISTS
	IF A-LENGTH = 0 THEN
		DISPLAY 'No words have been specified.'
		STOP RUN.

OPEN I-O CUSTOMER-DATA, KEYWORD-DB, KEYWORD-IDX.
MOVE 126 TO W-SHORTEST, W-MIN-LENGTH.
PERFORM VARYING NAMEDEX FROM 1 BY 1
	UNTIL NAMEDEX > A-LENGTH.
	MOVE W-WORD(NAMEDEX) TO WW-WORD.
	READ KEYWORD-DB.
		INVALID KEY
			DISPLAY 'KEYWORD NOT FOUND: ', W-WORD(NAMEDEX)
	STOP RUN.
	
	END-READ.
	MOVE 1 TO W-POS(NAMEDEX)
	MOVE FIRSTKW TO RELAKEY.
	READ KEYWORD-IDX INTO W-ID-LIST(NAMEDEX)
		INVALID KEY
			DISPLAY 'UNABLE TO READ RECORD ', RELAKEY.
			STOP RUN.
		END READ
IF W-LEN(NAMEDEX) < W-MIN-LENGTH.
	MOVE W-LEN(NAMEDEX) TO W-MIN-LENGTH
	SET W-SHORTEST TO NAMEDEX
	END-IF.
END PERFORM.

PERFORM FIND-MATCH VARYING W-POS(W-SHORTEST) FROM 1 BY 1
	UNTIL W-POS(W-SHORTEST) > W-LEN(W-SHORTEST).
PERFORM UNTIL A-NEXT(W-SHORTEST) = 0.
	MOVE A-NEXT(W-SHORTEST) TO RELAKEY.
	READ KEYWORD-IDX INTO W-ID-LIST(W-SHORTEST)
	PERFORM FIND-MATCH VARYNG W-POS(W-SHORTEST) FROM 1 BY W
		UNTIL W-POS(W-SHORTEST) , W-LEN(W-SHORTEST)
	END-PERFORM.	


FIND-MATCH
	SET MATCH TO TRUE.
	PERFORM LOOK-FOR-MATCH VARYING NAMEDEX FROM 1 BY 1
		UNTIL NAMEDEX > A-LENGTH OR NO-MATCH.
	IF MATCH THEN
		MOVE W-LIST(W-SHORTEST, W-POS(W-SHORTEST)) TO CUS-ID
		MOVE W-POS(W-SHORTEST) TO W-SHORTTRM.
		MOVE W-LIST(W-SHORTEST, W-SHORTTRM)
			TO CUS-ID
		READ CUSTOMER-DATA.
		DISPLAY CUS-NAME.

LOOK-FOR-MATCH
	IF NAMEDEX NOT = W-SHORTEST THEN
		MOVE 1 TO W-SHORTTRM2.
		MOVE W-POS(W-SHORTEST) TO W-SHORTTRM.
		PERFORM UNTIL W-SHORTTRM2 > W-LEN(NAMEDEX) OR
			W-LIST(NAMEDEX, W-POS(NAMEDEX)) >=
			W-LIST(W-SHORTEST, W-POS(W-SHORTEST))
		W-LIST(NAMEDEX, W-SHORTTRM2) >=
		W-LIST(W-SHORTEST, W-SHORTTRM)
			
	ADD 1 TO W-SHORTTRM2.
	IF W-SHORTTRM2 > W-LEN(NAMEDEX) AND
		A-NEXT(NAMEDEX) NOT = 0 THEN
			MOVE A-NEXT(NAMEDEX) TO RELAKEY.
			READ KEYWORD-IDX INTO W-ID-LIST(NAMEDEX).
			MOVE 1 TO W-SHORTTRM2.
		END-IF.
	END PERFORM.
	MOVE W-SHORTTRM2 TO W-POS(NAMEDEX).
	IF W-POS(NAMEDEX) > W-LEN(NAMEDEX) OR
	W-LIST(NAMEDEX, W-SHORTTRM2) >
	W-LIST(W-SHORTEST, W-SHORTTRM)
	SET NO-MATCH TO TRUE.